# Definir la configuración de nuestro balanceador de carga (servicio)
apiVersion: v1
kind: Service
metadata:
  name: kubeservice
spec:
  selector:
    app: kubeoperations
  ports:
    - port: 80
      targetPort: 8080
  type: LoadBalancer
---
# versión del recurso con el que estamos trabajando
apiVersion: apps/v1
# El tipo de recurso, esta enfocado en nuestros contenedores
kind: Deployment
# El nombre con el cual será reconocida nuestra app, este nombre aparecerá como prefijo de cada pod
metadata:
  name: kubeoperations
# Especificaciones, describe lo que queremos que se implemente con este recurso
spec:
  # El siguiente atributo define el número de pods que se generará en nuestro cluster de kubernetes
  replicas: 5
  # El siguiente atributo hace referencia para seleccionar nuestras instancias ya plicar la configuración
  selector:
    matchLabels:
      app: kubeoperations
  # La plantilla de nuestro prod, de manera que aquí vamos a describir los detlles que contendrá dicho pod
  template:
    metadata:
      labels:
        app: kubeoperations
    # Especificaciones de nuestro pod
    spec:
      # Aquí definimos las caracteristicas de nuestros contenedores que va a tener el pod
      containers:
      - name: kubecontainer
        image: alexpinaida55575/kubernetesap55575:1.0.0
        # Puerto que va a estar expuesto para poder llegar a nuestra app
        ports:
          - containerPort: 8080
        env:
          - name: MONGO_URL
            value: http://localhost:5433
        # Este atributo especifica la politica de como manejar el pull de la imagen de docker
        # ifNoPresent: solo se hará pull de dockerhub si no esta la imagen en nuestro entorno local
        # Always: siempre vamos a hacer pull de la imagen desde dockerhub, no importa si la imagen ya se encuentra en nuestro ambiente local
        # Never: nunca vamos a a hacer pull de dockerhub, fuorzando a que la imagen debe estar si o si en mi ambiente local
        imagePullPolicy: Always